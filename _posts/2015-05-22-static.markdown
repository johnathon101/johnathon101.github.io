---
layout: post
title:  "Got Some Static"
date:   2015-05-22 21:39:09
categories: featured
---

<p>
One year out from finishing code school I can not be happier with the decision to pursue a new career. The method I chose to enter the programming field is a bit unorthodox, but the outcome has proven specified training can pay dividends in a short amount of time. One of the major changes in the last six months was moving from the duck typed ruby language into the tightly bound static types C#. I had my initial opinions about how much more time it took to get data from the storage layer into the view. .Net forces you to static type your view models. In ruby, it is not uncommon to see active record work in the view itself, which now seems sloppy to me. I have really come to like that where ever I look at a variable in the stack, I know what it is and what I can do with it. 
</p>
<br>
<p>
The nullable operators in C# are also much cleaner to me then the trys in ruby. Instead of daisy chaining many trys in order to get to the value I want in a hash, I can set the value in the view model as nullable and control my work flow in a more understandable fashion. The garbage collection in .Net has less mystery than Rails. I know the lifetime of my instance variables and where they live in the heap. One of the best resources I have found to help tailor my understanding of the best ways to avoid latency in the stack is Writing High Performance .Net Code by Ben Watson. There are many tools explained in this book that help identify possible memory issues in your applications. I have just touched the surface of PerfView and the IL Deconstructor that have really helped me understand the performance repercussions of the decisions we make in development as programmers. The chapter on garbage collection changed a few of my habits immediately. The memory allocated for a string is substantially larger than that allocated to a char even if both are blank. While it does not seem to be much difference in a small scale, compounded across an entire application it can add up. 
</p>

<p>
As someone who has come into .Net when the technology has started a big push to the open source community it is exciting time to be working in it.  
</p>

<a href="http://www.writinghighperf.net/">High Performance .Net Code</a> 